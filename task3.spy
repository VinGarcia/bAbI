
matcher number "[0-9]*";
matcher sentence "[a-zA-Z][a-zA-Z ]*";
matcher word "[a-zA-Z]*";

matcher move {
  "moved";
  "journeyed";
  "went back";
  "went";
  "travelled";
}

matcher pick {
  "got" return True;
  "grabbed" return True;
  "took" return True;
  "picked up" return True;
}

matcher drop {
  "left" return True;
  "dropped" return True;
  "discarded" return True;
  "put down" return True;
}

matcher verb "(move, pick, drop)"; 

matcher object {
  "apple";
  "football";
  "milk";
}

matcher place {
  "bathroom";
  "bedroom";
  "office";
  "hallway";
  "garden";
  "kitchen";
}

matcher reference {
  "there";
}

matcher name "[A-Z][a-z]*";

Object = map();
function init() { this.places = list("nowhere"); }
Object.__init__ = init
function move_to(where) {
  if (this.places[-1] != where) {
    this.places.push(where);
  }
}
Object.move_to = move_to;

Person = map();
function init() { this.where = "nowhere"; this.items = map() }
Person.__init__ = init;

Place = map();
function init() { this.items = map() }
Place.__init__ = init;

people = None
places = None
objects = None
function reset() {
  people = map()
  places = map()
  objects = map()
  
  places_list = list(
    "bathroom", "bedroom", "office",
    "hallway", "garden", "kitchen", "nowhere")
  for (name in places_list) {
    places[name] = new(Place)
  }

  objects_list = list("apple", "football", "milk")
  for (name in objects_list) {
    objects[name] = new(Object)
  }
}

hit=0
miss=0

matcher read {
  "(number); (name)n; (verb)v; to the (place)p;." {
    if (people[n] == None) {
      people[n] = new(Person);
    }

    people[n].where = p;
    for(item_name in people[n].items) {
      'If that person is holding the object:'
      if (people[n].items[item_name] == True) {
        objects[item_name].move_to(p);
      }
    }

    finish True
  }

  "(number); (name)n; (pick)v; the (object)obj;(".", " there.")w;" {
    if (people[n] == None) {
      people[n] = new(Person);
    }

    'Move the object from the place to the person:'
    people[n].items[obj] = True;
    places[people[n].where].items[obj] = False;
    objects[obj].move_to(people[n].where)

    finish True
  }

  "(number); (name)n; (drop)v; the (object)obj;(".", " there.")w;" {
    if (people[n] == None) {
      people[n] = new(Person);
    }

    'Move the object from the person to the place:'
    people[n].items[obj] = False;
    places[people[n].where].items[obj] = True;
    objects[obj].move_to(people[n].where)

    finish True
  }

  "(number); Where was the (object)o; before the (place)p;? |(word)A;|[0-9 ]*" {
    _places = objects[o].places

    'Walk from back to front:'
    for (idx in range(_places.len()-1, -1, -1)) {

      if (_places[idx] == p) {
        if (idx > 0 && _places[idx-1] == A) {
          hit = hit + 1
        } else {
          miss = miss + 1
        }
        break;
      }
    }

    finish True;
  }
}

nlines = 0
stories = list();

file = open('train3.txt')

'Collect data from all stories:'
for (line in file.readlines()) {
  if (line[0] == '1' && line[1] == ' ') {
    story = list()
    stories.push(story)
  }
  story.push(line);
  nlines = nlines + 1
}

for (story in stories) {
  reset();
  for (line in story) {
    "print(line)"
    if (read.exec(line).len() == 0) {
      print('missed this line: %s' % line)
    }
  }
}

print()
print('Done!');
print()
print('Total stories read: %s' % stories.len());
print('Total hits: %s' % hit);
print('Total miss: %s' % miss);
print()

