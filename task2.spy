// Knowledge Base (41 lines):
matcher number "[0-9]*";
matcher sentence "[a-zA-Z][a-zA-Z ]*";
matcher word "[a-zA-Z]*";
matcher name "[A-Z][a-z]*";

matcher move {
  "moved";
  "journeyed";
  "went back";
  "went";
  "travelled";
}

matcher pick {
  "got";
  "grabbed";
  "took";
  "picked up";
}

matcher drop {
  "left";
  "dropped";
  "discarded";
  "put down";
}

matcher object {
  "apple";
  "football";
  "milk";
}

matcher place {
  "bathroom";
  "bedroom";
  "office";
  "hallway";
  "garden";
  "kitchen";
}

// Model (28 lines):
Person = map(
  '__init__': function() {
    this.where = "nowhere"
    this.items = map()
  }
)

Place = map(
  '__init__': function() {
    this.items = map()
  }
)

var people = None
var places = None
function reset() {
  people = map()
  places = map()
  
  p_list = list(
    "bathroom", "bedroom", "office",
    "hallway", "garden", "kitchen", "nowhere"
  )
  
  for (name in p_list) {
    places[name] = new Place()
  }
}

// Result Validation (9 lines):
var hit = 0
var miss = 0
function compare_results(guess, answer) {
  if (guess == answer) {
    hit = hit + 1;
  } else {
    miss = miss + 1
  }
}

// Parsing Complexity (53 lines):
matcher read {
  "(number); (name)n; (move); to the (place)p;." {
    if (people[n] == None) {
      people[n] = new Person();
    }

    people[n].where = p;
  }

  "(number); (name)n; (pick)v; the (object)obj;(".", " there.")w;" {
    if (people[n] == None) {
      people[n] = new Person();
    }

    // Move the object from the place to the person:
    people[n].items[obj] = True;
    places[people[n].where].items[obj] = False;
  }

  "(number); (name)n; (drop)v; the (object)o;(".", " there.")w;" {
    if (people[n] == None) {
      people[n] = new Person();
    }

    // Move the object from the person to the place:
    people[n].items[o] = False;
    places[people[n].where].items[o] = True;
  }

  "(number); Where is the (object)o;? |(word)answer;|[0-9 ]*" {
    // Check to see if someone is carrying the object:
    for (name in people) {
      if (people[name].items[o] == True) {
        guess = people[name].where
        compare_results(guess, answer)
        return;
      }
    }

    // Check to see if the object was dropped somewhere:
    for (name in places) {
      if (places[name].items[o] == True) {
        compare_results(name, answer)
        return;
      }
    }

    print('--> %s was not found!' % o);
  }
}

// NOTE: story 100, is a problem story.
// It can be used as a sample to try to solve all cases.

// Reading stories and executing the matcher network (32 lines):
nlines = 0
stories = list();

file = open('train2.txt')

// Collect data from all stories:
for (line in file.readlines()) {
  if (line[0] == '1' && line[1] == ' ') {
    story = list()
    stories.push(story)
  }
  story.push(line);
  nlines = nlines + 1
}

for (story in stories) {
  reset();
  for (line in story) {
    // print(line)
    if (read.match(line) == False) {
      print('missed this line: %s' % line)
    }
  }
}

print()
print('Done!');
print()
print('Total stories read: %s' % stories.len());
print('Total hits: %s' % hit);
print('Total miss: %s' % miss);
print()

