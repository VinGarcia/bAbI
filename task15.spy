
// Knowledge Base (10 lines):
matcher number "[0-9]*";
matcher word "[a-zA-Z]*";
matcher name "[A-Z][a-z]*";

matcher to_single {
  "mice" return 'mouse';
  "wolves" return 'wolf';
  "cats" return 'cat';
  "sheep" return 'sheep';
}

// Model (7 lines):
var species = None
var animals = None
function reset() {
  // Recent memory:
  species = map()
  animals = map()
}

// Result Validation (9 lines):
var hit = 0
var miss = 0
function compare_results(guess, answer) {
  if (guess == answer) {
    hit = hit + 1
  } else {
    miss = miss + 1
  }
}

// Parsing Complexity (19 lines):
matcher read {
  "(number); (word)n1; are afraid of (word)n2;." {
    n1 = to_single.match_one(n1.lower());
    if (species[n1] == None) {
      species[n1] = map()
    }
  
    species[n1].afraid = to_single.match_one(n2);
  }
  
  "(number); (name)n; is a (word)w;." {
    animals[n.lower()] = new species[w]()
  }
  
  "(number); What is (word)n; afraid of?|(word)answer;|[0-9 ]*" {
    guess = animals[n.lower()].afraid;
    compare_results(guess, answer);
  }
}

// Reading stories and executing the matcher network (31 lines):
nlines = 0
stories = list();

file = open('train15.txt')

// Collect data from all stories:
for (line in file.readlines()) {
  if (line[0] == '1' && line[1] == ' ') {
    story = list()
    stories.push(story)
  }
  story.push(line);
  nlines = nlines + 1
}

// Parse and answer each story:
for (story in stories) {
  reset();
  for (line in story) {
    // print(line)
    if (read.match(line) == False) {
      print('missed this line: %s' % line)
    }
  }
}

print()
print('Done!');
print()
print('Total stories read: %s' % stories.len());
print('Total hits: %s' % hit);
print('Total miss: %s' % miss);
print()

