// Knowledge Base (20 lines):
matcher number "[0-9]*";
matcher word "[a-zA-Z]*";
matcher name "[A-Z][a-z]*";

matcher verb {
  "moved";
  "journeyed";
  "went back";
  "went";
  "travelled";
}

matcher place {
  "bathroom";
  "bedroom";
  "office";
  "hallway";
  "garden";
  "kitchen";
}

// Model (2 lines):
var where_is = map();
var choices = ["no", "yes"]

// Result Validation (9 lines):
var hit = 0
var miss = 0
function compare_results(guess, answer) {
  if (guess == answer) {
    hit = hit + 1;
  } else {
    miss = miss + 1
  }
}

// Parsing Complexity (22 lines):
matcher read {
  "(number); (name)name; (verb); to the (place)place;." {
    where_is[name] = place;
  }

  "(number); (name)name; is no longer in the (place)place;." {
    where_is.pop(name);
  }

  "(number); (name)name; is in the (place)place;." {
    where_is[name] = place;
  }

  "(number); (name)name; is not in the (place)place;." {
    if (where_is[name] == place) where_is.pop(name);
  }

  "(number); Is (name)name; in the (place)place;? |(word)answer;|(number);" {
    guess = choices[where_is[name] == place]
    compare_results(guess, answer);
  }
}

// Reading stories and executing the matcher network (28 lines):
stories = list();

file = open('train9.txt')

// Collect data from all stories:
for (line in file.readlines()) {
  if (line[0] == '1' && line[1] == ' ') {
    story = list()
    stories.push(story)
  }
  story.push(line);
}

for (story in stories) {
  for (line in story) {
    if (read.match(line) == False) {
      print('missed this line: %s' % line)
    }
  }
}

print()
print('Done!');
print()
print('Total stories read: %s' % stories.len());
print('Total hits: %s' % hit);
print('Total miss: %s' % miss);
print()

